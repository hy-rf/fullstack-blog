CREATE TABLE
  users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(16) UNIQUE,
    email VARCHAR(100) UNIQUE,
    password_hash CHAR(60),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    PRIMARY KEY (id)
  );

CREATE TABLE
  posts (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(1000) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    author_id INTEGER,
    root_post_id INTEGER,
    post_id INTEGER,
    like_count INTEGER NOT NULL DEFAULT 0,
    save_count INTEGER NOT NULL DEFAULT 0,
    post_count INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    FOREIGN KEY (author_id) REFERENCES users,
    FOREIGN KEY (root_post_id) REFERENCES posts,
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE
  roles (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(10) NOT NULL UNIQUE,
    PRIMARY KEY (id)
  );

CREATE TABLE
  user_roles (
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users,
    FOREIGN KEY (role_id) REFERENCES roles
  );

CREATE TABLE
  post_likes (
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts,
    FOREIGN KEY (user_id) REFERENCES users
  );

CREATE TABLE
  user_saved_posts (
    user_id INTEGER NOT NULL,
    post_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users,
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE
  tags (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(30) NOT NULL,
    PRIMARY KEY (id)
  );

CREATE TABLE
  post_tags (
    post_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts,
    FOREIGN KEY (tag_id) REFERENCES tags
  );


CREATE TABLE 
  post_images (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    post_id INTEGER,
    url VARCHAR(255),
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE 
  avatars (
    user_id INTEGER,
    url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES users
  );

CREATE TABLE
  followings (
    follower_id INTEGER NOT NULL,
    followee_id INTEGER NOT NULL,
    FOREIGN KEY (follower_id) REFERENCES users,
    FOREIGN KEY (followee_id) REFERENCES users
  );

CREATE TABLE
  post_history (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    post_id INTEGER NOT NULL,
    content VARCHAR(1000) NOT NULL,
    image_urls INTEGER[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    FOREIGN KEY (post_id) REFERENCES posts
  );
  
INSERT INTO roles (name) VALUES ('admin'), ('user');


CREATE INDEX CONCURRENTLY posts_root_post_id ON posts(root_post_id);

-- for search fast
CREATE INDEX CONCURRENTLY posts_posts_content ON posts (content);
CREATE INDEX CONCURRENTLY posts_created_at_desc ON posts(created_at DESC);

-- if use statistic fields
CREATE INDEX CONCURRENTLY idx_posts_like_count_desc ON posts(like_count DESC);
CREATE INDEX CONCURRENTLY idx_posts_save_count_desc ON posts(save_count DESC);
CREATE INDEX CONCURRENTLY idx_post_count_desc ON posts(post_count DESC);


-- for search tsv
--ALTER TABLE posts ADD column tsv tsvector GENERATED ALWAYS AS (to_tsvector('english', content)) stored;
--CREATE INDEX idx_content_tsv ON posts USING gin (tsv) WITH (fastupdate = ON);

-- Use or not?
--CREATE EXTENSION pg_trgm;
--CREATE INDEX idx_posts_content_trgm ON posts USING gin (lower(content) gin_trgm_ops);
--CREATE INDEX idx_users_username_lower ON users (lower(username));


-- Function to increment like_count
CREATE OR REPLACE FUNCTION increment_like_count()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE posts
  SET like_count = like_count + 1
  WHERE id = NEW.post_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to increment save_count
CREATE OR REPLACE FUNCTION increment_save_count()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE posts
  SET save_count = save_count + 1
  WHERE id = NEW.post_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to increment post_count
CREATE OR REPLACE FUNCTION increment_post_count()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE posts
  SET post_count = post_count + 1
  WHERE id = NEW.post_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for post_likes
CREATE TRIGGER trigger_increment_like_count
AFTER INSERT ON post_likes
FOR EACH ROW
EXECUTE FUNCTION increment_like_count();

-- Trigger for user_saved_posts
CREATE TRIGGER trigger_increment_save_count
AFTER INSERT ON user_saved_posts
FOR EACH ROW
EXECUTE FUNCTION increment_save_count();

-- Trigger for posts
CREATE TRIGGER trigger_increment_post_count
AFTER INSERT ON posts
FOR EACH ROW
WHEN (NEW.post_id IS NOT NULL)
EXECUTE FUNCTION increment_post_count();