CREATE TABLE
  users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(16) UNIQUE,
    email VARCHAR(100) UNIQUE,
    password_hash CHAR(60),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    PRIMARY KEY (id)
  );

CREATE TABLE
  posts (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(1000) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    author_id INTEGER,
    root_post_id INTEGER,
    post_id INTEGER,
    like_count INTEGER NOT NULL DEFAULT 0,
    save_count INTEGER NOT NULL DEFAULT 0,
    post_count INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    FOREIGN KEY (author_id) REFERENCES users,
    FOREIGN KEY (root_post_id) REFERENCES posts,
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE
  roles (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(10) NOT NULL UNIQUE,
    PRIMARY KEY (id)
  );

CREATE TABLE
  user_roles (
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users,
    FOREIGN KEY (role_id) REFERENCES roles
  );

CREATE TABLE
  post_likes (
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts,
    FOREIGN KEY (user_id) REFERENCES users
  );

CREATE TABLE
  user_saved_posts (
    user_id INTEGER NOT NULL,
    post_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users,
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE
  tags (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(30) NOT NULL,
    PRIMARY KEY (id)
  );

CREATE TABLE
  post_tags (
    post_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts,
    FOREIGN KEY (tag_id) REFERENCES tags
  );


CREATE TABLE 
  post_images (
    post_id INTEGER,
    url VARCHAR(255),
    FOREIGN KEY (post_id) REFERENCES posts
  );

CREATE TABLE 
  avatars (
    user_id INTEGER,
    url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    FOREIGN KEY (user_id) REFERENCES users
  );

CREATE TABLE
  followings (
    follower_id INTEGER NOT NULL,
    followee_id INTEGER NOT NULL,
    FOREIGN KEY (follower_id) REFERENCES users,
    FOREIGN KEY (followee_id) REFERENCES users
  );
  
INSERT INTO roles (name) VALUES ('admin'), ('user');

CREATE UNIQUE INDEX unique_username ON users(username); -- WHERE (is_active = 'Y');

CREATE INDEX idx_posts_post_id ON posts(post_id);

CREATE INDEX idx_post_likes_post_id_user_id ON post_likes(post_id, user_id);

CREATE INDEX idx_saved_posts ON user_saved_posts(user_id, post_id);

CREATE INDEX idx_posts_created_at ON posts (created_at);

CREATE EXTENSION pg_trgm;

CREATE INDEX idx_posts_content_trgm ON posts USING gin (lower(content) gin_trgm_ops);

CREATE INDEX idx_users_username_lower ON users (lower(username));


--  ?
CREATE INDEX idx_user_saved_posts_post_id ON user_saved_posts (post_id);
CREATE INDEX idx_post_tags_post_id ON post_tags (post_id);

-- for search
ALTER TABLE posts ADD column tsv tsvector GENERATED ALWAYS AS (to_tsvector('english', content)) stored;
CREATE INDEX idx_content_tsv ON posts USING gin (tsv) WITH (fastupdate = ON);
CREATE INDEX idx_posts_like_count ON posts(like_count);
CREATE INDEX idx_posts_save_count ON posts(save_count);
